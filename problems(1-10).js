// Problem 1: Multiples of 3 and 5

// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

// Find the sum of all the multiples of 3 or 5 below the provided parameter value number.

function multiplesOf3and5(number) {
  let sum = 0;
  for (let i = 0 ; i < number; i++){
    if (i % 15 == 0) {
      sum = sum + i;
    } else if (i % 5 == 0) {
      sum = sum + i;
    } else if (i % 3 == 0) {
      sum = sum + i;
    }
  }
  return sum; 
}

let result_1 = multiplesOf3and5(1000);
console.log(result_1)


// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed n, find the sum of the even-valued terms.

function fiboEvenSum(n) {
  let sum = 0;
  let a = 0;
  let b = 1;
  for (let i = 2 ; b < n-1 ; i++) { 
    let c = a + b;
    a = b;
    b = c;
    if (b % 2 == 0) {
      sum = sum + b
    }
  }
  return sum;
}
let result_2 = fiboEvenSum(34)
console.log(result_2)


// The prime factors of 13195 are 5, 7, 13 and 29.

// What is the largest prime factor of the given number?

function largestPrimeFactor(number) {
  let largest = 1
  let prime = 2
  while (prime <= number) {
    if (number % prime == 0) {
      largest = prime
      number = number / prime
    } else {
      prime++;
    }
  }
  return largest
}

let result = largestPrimeFactor(13195);
console.log(result)